<div id="mainform" class="large-12 columns">
	<div class="row">
		<div class="large-3 columns end">
			<label for="SecretKey">Configuration Key (for making changes)</label><input id="SecretKey" type="text" />
		</div>
	</div>
	<div class="row">
		<div class="large-12 columns">
			<button id="BtnRefresh" onclick="SGH.GridLoadData(); return false;">Refresh</button>
			<button id="BtnAdd" onclick="var SGModule = prompt('Please enter Module to add.'); if ((SGModule) && (SGModule.length>0)) { SGH.GridRowAdd({ 'SecretKey': $('#SecretKey').val(), 'SGModule': SGModule }); } return false;">Add Row</button>
			<button id="BtnDel" onclick="SGH.GridRowDel({ 'SecretKey': $('#SecretKey').val(), 'RowIDs': SGH.getSelectedRowIDsStr() }); return false;">Del Selected Rows</button>
			<button id="AddUpdSGModule" onclick="ShowAddUpd(); return false;">Add/Update SlickGrid</button>
			<button id="GetSGModuleDefn" onclick="GetSGModuleDefn(); return false;">Download SlickGrid Defn</button>
			<button id="ClearAllCache" onclick="ClearAllCache(); return false;">Clear Cache</button>
		</div>
	</div>
	<div class="row">
		<div class="large-3 columns end">
			<label for="FilterGrid">Filter Grid - Module column</label><input id="FilterGrid" type="text" />
		</div>
	</div>
</div>
<div id="DialogAddUpdSGModule" title="Add/Update SlickGrid Module" style="display:none">
	<div class="row">
		<div class="large-12 columns">
			This will create the slickgrid definition as well as stub .json and .part webpart calls.<br />
			<b>To UPDATE existing configuration, select the 'Del existing defn.' option:<br />
			(1) All current configuration for slickgrid columns will be deleted and replaced by default stubs.<br />
			(2) Existing .json and .part webparts will have HandlerURL details updated. Any other webpart log, cache or security group access settings will be preserved (this will not be reset).</b><br />
			<b>IMPT! Remember to check-in code to codebase when you are done.</b><br /><br />
		</div>
	</div>
	<div class="row">
		<!--{{Module}}, {{ViewOrTableName}}, {{ShowFirstCol}}, 0, {{GetWebPartID}}, {{AddWebPartID}}, {{UpdRowFieldWebPartID}}, {{DelWebPartID}}, {{ExportWebPartID}}-->
		<div class="large-6 columns">
			<label for="ViewOrTableName">View or Table name</label><input id="ViewOrTableName" type="text" />
		</div>
		<div class="large-3 columns">
			<label for="ShowFirstCol">Show first column</label><input id="ShowFirstCol" type="checkbox" checked="checked" />
		</div>
		<div class="large-3 columns">
			<label for="DelExisting">Del existing defn.</label><input id="DelExisting" type="checkbox" />
		</div>
	</div>
	<div class="row">
		<div class="large-1 columns">
			<label for="Module">Module</label><input id="Module" type="text" />
		</div>
		<div class="large-1 columns">
			<label for="Version">Ver.</label><input id="Version" type="text" value="1" />
		</div>
		<div class="large-2 columns">
			<label for="Key">Key</label><input id="Key" type="text" />
		</div>
		<div class="large-4 columns">
			<label for="GetWebPartID">Get WebPart ID</label><input id="GetWebPartID" type="text" />
		</div>
		<div class="large-4 columns">
			<label for="ExportWebPartID">Export WebPart ID</label><input id="ExportWebPartID" type="text" />
		</div>
	</div>
	<div class="row">
		<div class="large-4 columns">
			<label for="AddWebPartID">Add WebPart ID</label><input id="AddWebPartID" type="text" />
		</div>
		<div class="large-4 columns">
			<label for="UpdRowFieldWebPartID">Upd RowField WebPart ID</label><input id="UpdRowFieldWebPartID" type="text" />
		</div>
		<div class="large-4 columns">
			<label for="DelWebPartID">Delete WebPart ID</label><input id="DelWebPartID" type="text" />
		</div>
	</div>
	<div class="row">
		<div class="large-12 columns">
			<label for="BasicGridURL">Basic Grid URL (read only, for reference use)</label><input id="BasicGridURL" type="text" readonly="readonly" />
		</div>
	</div>
</div>
<script>
	//bind to custom togShowHide event
	var $mainform = $('#mainform');
	$("#FilterGrid").val(QS.FilterModule || '');
	$(document).on("togShowHide", function (e) {
		if (e.Show) { $mainform.show(); } else { $mainform.hide(); }
	});
	$("#FilterGrid").keyup(function (e) {
		if (e.which == 27) this.value = '';
		RefreshGridFilter();
	});
	$("#Module").keyup(function (e) { UpdateAddNewUI(); });
	$("#Version").keyup(function (e) { UpdateAddNewUI(); });
	$("#Key").keyup(function (e) { UpdateAddNewUI(); });
	$("#GetWebPartID").keyup(function (e) { UpdateAddNewUI_GridURL(); });
	$("#ExportWebPartID").keyup(function (e) { UpdateAddNewUI_GridURL(); });
	$("#AddWebPartID").keyup(function (e) { UpdateAddNewUI_GridURL(); });
	$("#UpdRowFieldWebPartID").keyup(function (e) { UpdateAddNewUI_GridURL(); });
	$("#DelWebPartID").keyup(function (e) { UpdateAddNewUI_GridURL(); });
	//Override the edit handler
	function CustomEditCmdHandler (item, column, editCommand) {
		var EC = editCommand; EC.execute();
		SGH._SvrJSON("Main1.UpdSGRowFld.json", { "SecretKey": $("#SecretKey").val(), "RowID": item[SGH.RowKeyField], "ColID": column.id, "FldName": column.field, "FldVal": editCommand.serializedValue || "" }, EC);
	}
	function GetCustomGridFilterData() {
		return { searchString: ($("#FilterGrid").val() || '') };
	}
	function CustomGridFilter(item, args) {
		if (args.searchString !== '' && item['Module'].toLowerCase().indexOf(args.searchString.toLowerCase()) === -1) return false;
		return true;
	}
	function RefreshGridFilter() {
		SGH.DataView.setFilterArgs(GetCustomGridFilterData()); SGH.DataView.refresh();
	}
	function SetGridFilter(FilterVar) {
		$("#FilterGrid").val(FilterVar || ''); RefreshGridFilter();
	}
	function refreshData() { jQuery.event.trigger({ type: "refreshSG" }); }
	function ClearAllCache() {
		$.JSONPost('Main1.ClearAllCache.json', { "SecretKey": $("#SecretKey").val() }).done(function (data) {
			if ((data.d.RetMsg || '').length > 0) alert(data.d.RetMsg);
		});
	}
	function GetSGModuleDefn() {
		var SGModKey = prompt("Please enter the SlickGrid Module to Export", ($("#FilterGrid").val() || ''));
		SGModKey = SGModKey || '';
		if (SGModKey.length > 0) {
			$.JSONPostNewWindow('Main1.GetSlickGridConfigDefn.part', { "SGModKey": SGModKey });
		}
	}
	function UpdateAddNewUI() {
		var Module = ($('#Module').val() || ''), Ver = ($('#Version').val() || '1'), Key = ($('#Key').val() || '');
		var ModKey = Module + '.' + Key;
		$('#GetWebPartID').val(Module + Ver + '.' + Key + '_Get.json');
		$('#ExportWebPartID').val(Module + Ver + '.' + Key + '_Export.part');
		$('#AddWebPartID').val(Module + Ver + '.' + Key + '_Add.json');
		$('#UpdRowFieldWebPartID').val(Module + Ver + '.' + Key + '_UpdRowFld.json');
		$('#DelWebPartID').val(Module + Ver + '.' + Key + '_Del.json');
		UpdateAddNewUI_GridURL();
	}
	function UpdateAddNewUI_GridURL() {
		var Module = ($('#Module').val() || ''), Key = ($('#Key').val() || '');
		var ModKey = Module + '.' + Key;
		$('#BasicGridURL').val("/BCMain/basepg.htm?title=Page%20title%20here&widgets=Widgets/DefaultGrid.bcw.htm&SGModKey=" + ModKey);
	}
	function ShowAddUpd() { $("#DialogAddUpdSGModule").dialog("open"); }
	$("#DialogAddUpdSGModule").dialog({
		autoOpen: false, height: 450, width: 750, modal: true,
		buttons: {
			"Submit": function () {
				var ViewOrTableName = ($('#ViewOrTableName').val() || '');
				var Module = ($('#Module').val() || ''), Key = ($('#Key').val() || '');
				var ModKey = Module + '.' + Key;
				$.JSONPost('Main1.GenGridDefinition.json', { "SecretKey": $("#SecretKey").val(), 'Module': ModKey, 'DelExisting': ($('#DelExisting').is(':checked')), 'ViewOrTableName': ViewOrTableName, 'ShowFirstCol': ($('#ShowFirstCol').is(':checked')), 'GetWebPartID': ($('#GetWebPartID').val() || ''), 'ExportWebPartID': ($('#ExportWebPartID').val() || ''), 'AddWebPartID': ($('#AddWebPartID').val() || ''), 'UpdRowFieldWebPartID': ($('#UpdRowFieldWebPartID').val() || ''), 'DelWebPartID': ($('#DelWebPartID').val() || '') })
				.done(function (data) {
					if ((data.d.RetMsg || '').length > 0) alert(data.d.RetMsg);
					SetGridFilter(ModKey); refreshData();
				})
				.fail(function (jqXHR, textStatus, errorThrown) { SetGridFilter(ModKey); refreshData(); });
				$(this).dialog("close");
			},
			Cancel: function () {
				$(this).dialog("close");
			}
		},
		close: function () {
			//allFields.val("").removeClass("ui-state-error");
		}
	});
	window.DoGridInit = true; //ready for SG to init
</script>